/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * MyTweets.java
 *
 * Created on 08/04/2011, 02:05:30 Ù…
 */

package OurPackage;

import java.sql.Connection;
import java.sql.ResultSet;
import java.sql.Statement;
import java.util.Vector;
import javax.swing.DefaultComboBoxModel;
import javax.swing.DefaultListModel;
import javax.swing.JOptionPane;
import javax.swing.SwingUtilities;
import javax.swing.UIManager;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author pc
 */
public class MyTweets extends javax.swing.JPanel {
String database ="jdbc:odbc:Driver={Microsoft Access Driver (*.mdb)};DBQ=TwitterDB.mdb;";
  
    public MyTweets() {
        initComponents();
        showCategories();
    
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        SearchPanel = new javax.swing.JPanel();
        SearchButton = new javax.swing.JButton();
        ShowResultPanel = new javax.swing.JPanel();
        jScrollPane3 = new javax.swing.JScrollPane();
        SearchResultList = new javax.swing.JList(SearchResultModel);
        SearchTextField = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        CategoriesComboBox = new javax.swing.JComboBox(CategoryComboBoxModel);
        AuthorNameTextField = new javax.swing.JTextField();
        AuthorNameSuggestionPanel = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        AuthorNameList = new javax.swing.JList(AuthoNametModel);

        setBackground(new java.awt.Color(255, 255, 255));

        SearchPanel.setBackground(new java.awt.Color(221, 238, 255));
        SearchPanel.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        SearchPanel.setName("SearchPanel"); // NOI18N

        SearchButton.setText("Search");
        SearchButton.setName("SearchButton"); // NOI18N
        SearchButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SearchButtonActionPerformed(evt);
            }
        });

        ShowResultPanel.setName("ShowResultPanel"); // NOI18N

        jScrollPane3.setName("jScrollPane3"); // NOI18N

        SearchResultList.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        SearchResultList.setFocusCycleRoot(true);
        SearchResultList.setFocusTraversalPolicyProvider(true);
        SearchResultList.setName("SearchResultList"); // NOI18N
        SearchResultList.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                SearchResultListMouseClicked(evt);
            }
        });
        jScrollPane3.setViewportView(SearchResultList);

        ShowResultPanel.setVisible(false);

        javax.swing.GroupLayout ShowResultPanelLayout = new javax.swing.GroupLayout(ShowResultPanel);
        ShowResultPanel.setLayout(ShowResultPanelLayout);
        ShowResultPanelLayout.setHorizontalGroup(
            ShowResultPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane3, javax.swing.GroupLayout.DEFAULT_SIZE, 426, Short.MAX_VALUE)
        );
        ShowResultPanelLayout.setVerticalGroup(
            ShowResultPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane3, javax.swing.GroupLayout.DEFAULT_SIZE, 67, Short.MAX_VALUE)
        );

        SearchTextField.setName("SearchTextField"); // NOI18N
        SearchTextField.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                SearchTextFieldKeyReleased(evt);
            }
        });

        javax.swing.GroupLayout SearchPanelLayout = new javax.swing.GroupLayout(SearchPanel);
        SearchPanel.setLayout(SearchPanelLayout);
        SearchPanelLayout.setHorizontalGroup(
            SearchPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, SearchPanelLayout.createSequentialGroup()
                .addGap(60, 60, 60)
                .addGroup(SearchPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(SearchButton)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, SearchPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(SearchTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 426, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(ShowResultPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(62, 62, 62))
        );
        SearchPanelLayout.setVerticalGroup(
            SearchPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, SearchPanelLayout.createSequentialGroup()
                .addGap(98, 98, 98)
                .addComponent(SearchTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, 0)
                .addComponent(ShowResultPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(7, 7, 7)
                .addComponent(SearchButton, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        jLabel3.setText("Search For Tweets You Have Saved Before");
        jLabel3.setName("jLabel3"); // NOI18N

        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel1.setText("Categories");
        jLabel1.setCursor(new java.awt.Cursor(java.awt.Cursor.MOVE_CURSOR));
        jLabel1.setEnabled(false);
        jLabel1.setName("jLabel1"); // NOI18N

        jLabel2.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel2.setText("Author");
        jLabel2.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        jLabel2.setEnabled(false);
        jLabel2.setName("jLabel2"); // NOI18N

        CategoriesComboBox.setName("CategoriesComboBox"); // NOI18N
        CategoriesComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CategoriesComboBoxActionPerformed(evt);
            }
        });

        AuthorNameTextField.setName("AuthorNameTextField"); // NOI18N
        AuthorNameTextField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                AuthorNameTextFieldActionPerformed(evt);
            }
        });
        AuthorNameTextField.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                AuthorNameTextFieldKeyReleased(evt);
            }
        });

        AuthorNameSuggestionPanel.setVisible(false);
        AuthorNameSuggestionPanel.setBackground(new java.awt.Color(255, 255, 255));
        AuthorNameSuggestionPanel.setName("AuthorNameSuggestionPanel"); // NOI18N

        jScrollPane1.setName("jScrollPane1"); // NOI18N

        AuthorNameList.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        AuthorNameList.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        AuthorNameList.setName("AuthorNameList"); // NOI18N
        AuthorNameList.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                AuthorNameListMousePressed(evt);
            }
        });
        jScrollPane1.setViewportView(AuthorNameList);

        javax.swing.GroupLayout AuthorNameSuggestionPanelLayout = new javax.swing.GroupLayout(AuthorNameSuggestionPanel);
        AuthorNameSuggestionPanel.setLayout(AuthorNameSuggestionPanelLayout);
        AuthorNameSuggestionPanelLayout.setHorizontalGroup(
            AuthorNameSuggestionPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(AuthorNameSuggestionPanelLayout.createSequentialGroup()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 184, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(15, Short.MAX_VALUE))
        );
        AuthorNameSuggestionPanelLayout.setVerticalGroup(
            AuthorNameSuggestionPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(AuthorNameSuggestionPanelLayout.createSequentialGroup()
                .addGap(0, 0, 0)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 70, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 79, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(CategoriesComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, 135, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(312, 312, 312)
                .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 66, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(AuthorNameSuggestionPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addContainerGap(66, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(AuthorNameTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 184, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap())))
            .addGroup(layout.createSequentialGroup()
                .addGap(142, 142, 142)
                .addComponent(SearchPanel, javax.swing.GroupLayout.PREFERRED_SIZE, 552, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(193, Short.MAX_VALUE))
            .addGroup(layout.createSequentialGroup()
                .addGap(270, 270, 270)
                .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 274, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(343, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(CategoriesComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(AuthorNameTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, 0)
                        .addComponent(AuthorNameSuggestionPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 50, Short.MAX_VALUE)
                .addComponent(SearchPanel, javax.swing.GroupLayout.PREFERRED_SIZE, 235, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents

    private void SearchButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SearchButtonActionPerformed
       showResultsPage();
        getAllResult();
     
    }//GEN-LAST:event_SearchButtonActionPerformed

    private void SearchResultListMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_SearchResultListMouseClicked
        selectFromSearchResultsuggestionList();
}//GEN-LAST:event_SearchResultListMouseClicked

    private void SearchTextFieldKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_SearchTextFieldKeyReleased
       
        deletSearchResultList();
        checkIsEmptyForTweetList();
        showListOfResultSuggestion();
        checkIsEmptyForTweetList();
}//GEN-LAST:event_SearchTextFieldKeyReleased

    private void CategoriesComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CategoriesComboBoxActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_CategoriesComboBoxActionPerformed

    private void AuthorNameTextFieldKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_AuthorNameTextFieldKeyReleased
      deletAuthorNameList();
      checkIsEmptyForAuthorList();
      ListOAuthorSuggestion();
      checkIsEmptyForAuthorList();
    }//GEN-LAST:event_AuthorNameTextFieldKeyReleased

    private void AuthorNameListMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_AuthorNameListMousePressed
      selectFromAuthorsuggestionList();
    }//GEN-LAST:event_AuthorNameListMousePressed

    private void AuthorNameTextFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_AuthorNameTextFieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_AuthorNameTextFieldActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    public static javax.swing.JList AuthorNameList;
    public static javax.swing.JPanel AuthorNameSuggestionPanel;
    public static javax.swing.JTextField AuthorNameTextField;
    private javax.swing.JComboBox CategoriesComboBox;
    private javax.swing.JButton SearchButton;
    public static javax.swing.JPanel SearchPanel;
    private javax.swing.JList SearchResultList;
    private javax.swing.JTextField SearchTextField;
    private javax.swing.JPanel ShowResultPanel;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane3;
    // End of variables declaration//GEN-END:variables
 DefaultTableModel AllResultTablemodel=new DefaultTableModel();
 DefaultTableModel UrlsTablemodel=new DefaultTableModel();
 DefaultTableModel TextsTablemodel=new DefaultTableModel();
 JavaAccess AccessObj = new JavaAccess();
 public DefaultListModel CtegoriesModel=new DefaultListModel();
 public static DefaultListModel AuthoNametModel=new DefaultListModel();
 public DefaultListModel SearchResultModel=new DefaultListModel();
 public DefaultListModel ShowSenderListModel=new DefaultListModel();

 public DefaultComboBoxModel CategoryComboBoxModel=new DefaultComboBoxModel();
  public DefaultComboBoxModel SenderNameComboBoxModel=new DefaultComboBoxModel();


private void showResultsPage()
    {
        StartPageFrame.ShowPanel.removeAll();
        StartPageFrame.ShowPanel.add(new Results());
        StartPageFrame.ShowPanel.setTitleAt(0, "Search Results");
    }
public void showCategories()
    {
     try
        {
           Class.forName("sun.jdbc.odbc.JdbcOdbcDriver");
           Connection connection=java.sql.DriverManager.getConnection(database);
           Statement statement=connection.createStatement();
           ResultSet rs=statement.executeQuery("select CatName from Category");
           int i=0;

           while(rs.next())
           {
              CategoryComboBoxModel.addElement(rs.getString("CatName"));
               i++;
           }
       }
      catch(Exception e){e.printStackTrace();
        }
      }
public void getAllResult()
    {
         int RowCount=0;
         int CatId=0;
        int AuthorId=0;
     try
        {
           Class.forName("sun.jdbc.odbc.JdbcOdbcDriver");
           Connection connection=java.sql.DriverManager.getConnection(database);
           Statement statement=connection.createStatement();
           
            ResultSet getCatId=statement.executeQuery("select CatID from Category where CatName='"+ CategoriesComboBox.getSelectedItem()+"'");
           while(getCatId.next())
            {
                 CatId=Integer.parseInt( getCatId.getString("CatID"));

            }
           
          ResultSet getAuthorId=statement.executeQuery("select AuthorID from Author where AuthorName='"+AuthorNameTextField.getText()+"'");
           while(getAuthorId.next())
            {
                AuthorId=Integer.parseInt( getAuthorId.getString("AuthorID"));
            }
           
           
          if(!SearchTextField.getText().isEmpty() && !AuthorNameTextField.getText().isEmpty())
          {
           ResultSet rs=statement.executeQuery("SELECT * FROM Tweets WHERE SearchKW ='"+SearchTextField.getText()+"'and CatID="+ CatId+" and AuthorID="+AuthorId+"");
           AllResultTablemodel=new DefaultTableModel(new String[]{"Tweet","Author","TweetDate"}, 0);
           while(rs.next())
           {
               Object obj[]={rs.getString(new String("Tweet".getBytes(),"utf-8")),AuthorNameTextField.getText(),rs.getString("TweetDate")};
               AllResultTablemodel.addRow(obj);
               RowCount++;
           }
          }
          
          if(!SearchTextField.getText().isEmpty() && AuthorNameTextField.getText().isEmpty())
          {
           ResultSet rs=statement.executeQuery("SELECT * from Tweets where SearchKW ='"+SearchTextField.getText()+"'and CatID="+ CatId);
           AllResultTablemodel=new DefaultTableModel(new String[]{"Tweet","Author","TweetDate"}, 0);
           while(rs.next())
           {
               int AuthorID = Integer.parseInt(rs.getString("AuthorID"));
               
               Object obj[]={rs.getString("Tweet"),AccessObj.getAuthorName(AuthorID),rs.getString("TweetDate")};
               AllResultTablemodel.addRow(obj);
               RowCount++;
           }
          }
          
          if(SearchTextField.getText().isEmpty() && !AuthorNameTextField.getText().isEmpty())
          {
            ResultSet rs=statement.executeQuery("select * from Tweets where CatID="+ CatId+" and AuthorID="+AuthorId+"");
            AllResultTablemodel=new DefaultTableModel(new String[]{"Tweet","Author","TweetDate"}, 0);
           while(rs.next())
           {
               Object obj[]={rs.getString("Tweet"),AuthorNameTextField.getText(),rs.getString("TweetDate")};
               AllResultTablemodel.addRow(obj);
               RowCount++;
           }
          }
          
          if(SearchTextField.getText().isEmpty() && AuthorNameTextField.getText().isEmpty())
          {
               ResultSet rs=statement.executeQuery("SELECT * from Tweets where CatID="+ CatId);
               AllResultTablemodel = new DefaultTableModel(new String[]{"Tweet","Author","TweetDate"}, 0);
               
               while(rs.next())
               {
                   int AuthorID = Integer.parseInt(rs.getString("AuthorID"));

                   Object obj[]={rs.getString("Tweet"),AccessObj.getAuthorName(AuthorID),rs.getString("TweetDate")};
                   AllResultTablemodel.addRow(obj);
                   RowCount++;
               }
          }
          
          
           for(int i=RowCount;i<25;i++)
           {
              Object ob[]={"","",""};
               AllResultTablemodel.addRow(ob);
           }
           Results.AllResultsTable.setModel(AllResultTablemodel);
           Results.AllResultsTable.getColumnModel().getColumn(0).setPreferredWidth(600);
           Results.AllResultsTable.getColumnModel().getColumn(1).setPreferredWidth(150);
           //Results.AllResultsTable.getColumnModel().getColumn(2).setPreferredWidth(150);
           connection.close();
       }
    catch(Exception e){e.printStackTrace();
         JOptionPane.showMessageDialog(null,"Error","Try Again",JOptionPane.ERROR_MESSAGE);
       }
    }
public void showListOfResultSuggestion()
    {
     try
        {
           Class.forName("sun.jdbc.odbc.JdbcOdbcDriver");
           Connection connection=java.sql.DriverManager.getConnection(database);
           Statement statement=connection.createStatement();
           if(!SearchTextField.getText().isEmpty())
           {
                ShowResultPanel.setVisible(true);
                  ResultSet rs=statement.executeQuery("select SearchKW from Tweets where SearchKW like '"+SearchTextField.getText()+"%'");
                  int i=0;
                  boolean found=false;
                  Vector ob=new Vector();
                  while(rs.next())
                    { found=false;
                      String tweet=rs.getString("SearchKW");
                      if(i==0)
                      {    ob.add(tweet);
                           SearchResultModel.add(i,tweet);
                           i++;
                      }
                      for(int j=0;j<ob.size();j++)
                      {
                          if(ob.get(j).equals(tweet))
                             found=true;
                        }
                     if(found==false)
                       {
                           ob.add(tweet);
                           SearchResultModel.add(i,tweet);
                           i++;
                       }
                    }
                  ob.clear();
               }
               connection.close();
         }
     catch(Exception e){e.printStackTrace();
        JOptionPane.showMessageDialog(null,"Error","Try Again",JOptionPane.ERROR_MESSAGE);
          }
    }
public void deletSearchResultList()
    {
    SearchResultModel.clear();
}
public void deletSenderNameList()
    {
    ShowSenderListModel.clear();
}
public void checkIsEmptyForTweetList()
    {
    if(SearchResultModel.isEmpty())
        ShowResultPanel.setVisible(false);
    else
        ShowResultPanel.setVisible(true);
}
public void selectFromSearchResultsuggestionList()
    {
    SearchTextField.setText((String) SearchResultList.getSelectedValue());
     ShowResultPanel.setVisible(false);
}
/*public void getUrlsResult()
    {
    int RowCount=0;
    int CatId=0;
    int AuthorId=0;
     try
        {
           Class.forName("sun.jdbc.odbc.JdbcOdbcDriver");
           Connection connection=java.sql.DriverManager.getConnection(database);
           Statement statement=connection.createStatement();
           ResultSet getCatId=statement.executeQuery("select CatID from Category where CatName='"+ CategoriesComboBox.getSelectedItem()+"'");
           while(getCatId.next())
              {
                 CatId=Integer.parseInt( getCatId.getString("CatID"));

            }
          ResultSet getAuthorId=statement.executeQuery("select AuthorID from Author where AuthorName='"+AuthorNameTextField.getText()+"'");
           while(getAuthorId.next())
              {
                AuthorId=Integer.parseInt( getAuthorId.getString("AuthorID"));
            }
          
           ResultSet rs=statement.executeQuery("select * from Tweets where SearchKW ='"+SearchTextField.getText()+"'and CatID="+ CatId+" and AuthorID="+AuthorId+" and Tweet like '%http:\\%'");

           UrlsTablemodel=new DefaultTableModel(new String[]{"Tweet","Author","TweetDate"}, 0);
           while(rs.next())
           {
               Object obj[]={rs.getString("Tweet"),AuthorNameTextField.getText(),rs.getString("TweetDate")};

               UrlsTablemodel.addRow(obj);
               RowCount++;
           }
           for(int i=RowCount;i<25;i++)
           {
              Object ob[]={"","",""};
               UrlsTablemodel.addRow(ob);
           }
            Results.UrlsResultsTable.setModel(UrlsTablemodel);
            Results.UrlsResultsTable.getColumnModel().getColumn(0).setPreferredWidth(600);
            Results.UrlsResultsTable.getColumnModel().getColumn(1).setPreferredWidth(150);
            Results.UrlsResultsTable.getColumnModel().getColumn(2).setPreferredWidth(150);
           connection.close();
       }
    catch(Exception e){e.printStackTrace();
          System.out.println("Error");
       }
    }*/
public void setLookAndFeel()
    {
        try {
            UIManager.setLookAndFeel("javax.swing.plaf.nimbus.NimbusLookAndFeel");
            SwingUtilities.updateComponentTreeUI(this);
        } catch (Exception excep) {
        }
    }
/*public void getTextsResult()
    {
    int RowCount=0;
     int CatId=0;
    int AuthorId=0;
     try
        {
           Class.forName("sun.jdbc.odbc.JdbcOdbcDriver");
           Connection connection=java.sql.DriverManager.getConnection(database);
           Statement statement=connection.createStatement();
           ResultSet getCatId=statement.executeQuery("select CatID from Category where CatName='"+ CategoriesComboBox.getSelectedItem()+"'");
           while(getCatId.next())
              {
                 CatId=Integer.parseInt( getCatId.getString("CatID"));
                 

            }
          ResultSet getAuthorId=statement.executeQuery("select AuthorID from Author where AuthorName='"+AuthorNameTextField.getText()+"'");
           while(getAuthorId.next())
              {
                AuthorId=Integer.parseInt( getAuthorId.getString("AuthorID"));
                System.out.println(AuthorId);
            }
          
           ResultSet rs=statement.executeQuery("select * from Tweets where SearchKW ='"+SearchTextField.getText()+"'and CatID="+ CatId+" and AuthorID="+AuthorId+" and Tweet not like '%http:\\%'");
          
           TextsTablemodel=new DefaultTableModel(new String[]{"Tweet","Author","TweetDate"}, 0);
           while(rs.next())
           {
               Object obj[]={rs.getString("Tweet"),AuthorNameTextField.getText(),rs.getString("TweetDate")};
               TextsTablemodel.addRow(obj);
               RowCount++;
           }
           for(int i=RowCount;i<25;i++)
           {
              Object ob[]={"","",""};
               TextsTablemodel.addRow(ob);
           }
            Results.TextsResultsTable.setModel(TextsTablemodel);
            Results.TextsResultsTable.getColumnModel().getColumn(0).setPreferredWidth(600);
            Results.TextsResultsTable.getColumnModel().getColumn(1).setPreferredWidth(150);
            Results.TextsResultsTable.getColumnModel().getColumn(2).setPreferredWidth(150);
           connection.close();
       }
    catch(Exception e){e.printStackTrace();
          System.out.println("Error");
       }
    }*/



public void ListOAuthorSuggestion()
    {
     try
        {
           Class.forName("sun.jdbc.odbc.JdbcOdbcDriver");
           Connection connection=java.sql.DriverManager.getConnection(database);
           Statement statement=connection.createStatement();
           if(!MyTweets.AuthorNameTextField.getText().isEmpty())
           {
                MyTweets.AuthorNameSuggestionPanel.setVisible(true);
              ResultSet rs=statement.executeQuery("select AuthorName from Author where AuthorName like '"+MyTweets.AuthorNameTextField.getText()+"%'");
              int i=0;
              boolean found=false;
              Vector ob=new Vector();
              while(rs.next())
                { found=false;
                  String tweet=rs.getString("AuthorName");
                  if(i==0)
                  {    ob.add(tweet);
                       MyTweets.AuthoNametModel.add(i,tweet);
                       i++;
                  }
                  for(int j=0;j<ob.size();j++)
                  {
                      if(ob.get(j).equals(tweet))
                         found=true;
                    }
                 if(found==false)
                   {
                       ob.add(tweet);
                       MyTweets.AuthoNametModel.add(i,tweet);
                       i++;
                   }
                }
              ob.clear();
           }
           connection.close();
         }
     catch(Exception e){e.printStackTrace();
         JOptionPane.showMessageDialog(null,"Error","Try Again",JOptionPane.ERROR_MESSAGE);
          }
    }
public void deletAuthorNameList()
    {
    MyTweets.AuthoNametModel.clear();
}
public void checkIsEmptyForAuthorList()
    {
    if(MyTweets.AuthoNametModel.isEmpty())
        MyTweets.AuthorNameSuggestionPanel.setVisible(false);
    else
         MyTweets.AuthorNameSuggestionPanel.setVisible(true);
}
public void selectFromAuthorsuggestionList()
    {
    AuthorNameTextField.setText((String) AuthorNameList.getSelectedValue());
     AuthorNameSuggestionPanel.setVisible(false);
}
}
